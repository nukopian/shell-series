.\" Automatically generated by Pandoc 3.1.12.1
.\"
.TH "series" "1" "" "1.0.1" "extract a series from a source table"
.SS NAME
series \- extract a series from a source table
.SS SYNOPSIS
.IP
.EX
series [options] [\-\-]

Options:
    \-f, \-\-fields column\-spec
    \-d, \-\-delimiter input\-separator
    \-s, \-\-separator output\-separator
    \-r, \-\-rows style
        \-\-csv
        \-\-tuple
        \-\-list
        \-\-set
    \-H, \-\-no\-header
    \-S, \-\-no\-separator
    \-Q, \-\-no\-quotes
    \-h, \-\-help

style:
    a string used to define the opening and closing characters that wrap
    each row of the series and the final flattened result:

        style := [opening][quote]
        opening := \[aq](\[aq] | \[aq][\[aq] | \[aq]{\[aq] | \[aq]\[aq]
        quote := \[aq]\[dq]\[aq] | \[dq]\[aq]\[dq] | \[aq]\[aq]
.EE
.SS DESCRIPTION
Use the \f[CR]series\f[R] filter to create a series from a larger source
table.
Input is taken from \f[CR]stdin\f[R], while output is written to
\f[CR]stdout\f[R].
.PP
The \f[CR]series\f[R] filter may also be used in conjunction with the
\f[CR]flatten\f[R] filter to reshape data into a single\-line sequence.
.SS Options
.SS \f[CR]\-f\f[R], \f[CR]\-\-fields\f[R] \f[I]column\-spec\f[R]
Specify fields to extract from each row of the table.
Ranges are specified using a lower bound, followed by a dash and an
optional upper bound (\f[I]e.g.\f[R] 1\- or 3\-5).
Multiple field numbers and ranges may be separated by commas
(\f[I]e.g.\f[R] 1,2,5\-7).
.PP
The default is to extract all columns (effectively, 1\-).
.SS \f[CR]\-d\f[R], \f[CR]\-\-delimiter\f[R] \f[I]input\-separator\f[R]
Under the hood, it is awk that parses the source table.
.PP
If specified, the \f[I]awk\-field\-separator\f[R] is passed to awk using
its \-F option; otherwise, default awk behaviour applies.
.SS \f[CR]\-s\f[R], \f[CR]\-\-separator\f[R] \f[I]output\-separator\f[R] | \f[CR]SPACE\f[R] | \f[CR]NONE\f[R]
Specify the string used to separate each field of each row of the output
series.
.SS \f[CR]\-r\f[R], \f[CR]\-\-rows\f[R] \f[I]style\f[R] | \f[CR]NONE\f[R]
Specify how to decorate each row of the table.
The \f[I]style\f[R] value should consist of an optional bracket style
(\f[CR](\f[R], \f[CR][\f[R], or \f[CR]{\f[R]) followed by an optional
quoting style (\f[CR]\[aq]\f[R] or \f[CR]\[dq]\f[R]).
.PP
Whereas quoting style applies to each individual fields of each row of
the output series, bracket style is applied to each entire row.
.SS \f[CR]\-t\f[R], \f[CR]\-\-table\f[R]
A more compact form of \f[CR]\-s \[dq] \[dq]\f[R] for a table\-style.
.PP
Provided no output separator is specified, columns of the output series
will be aligned to table.
.SS \f[CR]\-\-csv\f[R]
A more compact alternative to
\f[CR]\-s \[dq],\[dq] \-r \[aq]\[dq]\[aq]\f[R] for a CSV list.
.SS \f[CR]\-\-tuple\f[R]
A more compact alternative to
\f[CR]\-s \[aq],\[aq] \-r \[dq](\[aq]\[dq]\f[R] for a Python
tuple\-style or SQL value\-set.
.SS \f[CR]\-\-list\f[R]
A more compact alternative to
\f[CR]\-s \[aq],\[aq] \-r \[dq][\[aq]\[dq]\f[R] for a Python
list\-style.
.SS \f[CR]\-\-set\f[R]
A more compact alternative to
\f[CR]\-s \[aq],\[aq] \-r \[dq]{\[aq]\[dq]\f[R] for a Python set\-style.
.SS \f[CR]\-H\f[R], \f[CR]\-\-no\-header\f[R]
Do not process the first row of the source table, or include it in the
output series.
.SS \f[CR]\-S\f[R], \f[CR]\-\-no\-separator\f[R]
The shorthand options specify a separator.
You may use this option afterwards to cancel that effect.
.SS \f[CR]\-Q\f[R], \f[CR]\-\-no\-quotes\f[R]
The shorthand options specify a quoting style.
You may use this option afterwards to cancel that effect.
.SS \f[CR]\-h\f[R], \f[CR]\-\-help\f[R]
Display usage notes.
.SS Examples
Given a file (\f[CR]sample\f[R]) containing the following rows:
.IP
.EX
hostname                       uuid                                  ipv4          free
phx3plohvmn0030.prod.phx3.gdg  3556aed5\-f4e7\-4ffe\-890c\-2627a034f8cf  10.43.6.130   0.00
phx3plohvmn0115.prod.phx3.gdg  c5c0258a\-a2f9\-4981\-aba3\-20064bfb21e1  10.43.9.214   0.03
phx3plohvmn0376.prod.phx3.gdg  906345f5\-3ea7\-41c6\-bb27\-9db3a629bf26  10.43.11.157  0.03
phx3plohvmn0084.prod.phx3.gdg  18993486\-79c7\-4465\-bb27\-ac1d9bd45d51  10.43.9.231   0.05
phx3plohvmn0382.prod.phx3.gdg  9497032c\-7a24\-462f\-b58b\-ae6f08b71460  10.43.11.193  0.06
phx3plohvmn0040.prod.phx3.gdg  6db9abd7\-ec07\-48af\-9a02\-9404f406d9e2  10.43.10.6    0.06
phx3plohvmn0053.prod.phx3.gdg  951ba7d5\-2c40\-42d9\-9da8\-4309b18d8da3  10.43.8.87    0.07
phx3plohvmn0045.prod.phx3.gdg  9972bd00\-2c72\-47a3\-9672\-58e5031a1298  10.43.10.28   0.15
phx3plohvmn0404.prod.phx3.gdg  3d6df97e\-f689\-498b\-9385\-85e75c2fec69  10.43.9.2     0.18
phx3plohvmn0370.prod.phx3.gdg  81193f20\-c01b\-4f25\-af3d\-00c9af0f36eb  10.43.11.161  0.25
.EE
.SS Example 1
Extract the first column only:
.IP
.EX
series \-f1 < sample
.EE
.IP
.EX
hostname
phx3plohvmn0030.prod.phx3.gdg
phx3plohvmn0115.prod.phx3.gdg
phx3plohvmn0376.prod.phx3.gdg
phx3plohvmn0084.prod.phx3.gdg
phx3plohvmn0382.prod.phx3.gdg
phx3plohvmn0040.prod.phx3.gdg
phx3plohvmn0053.prod.phx3.gdg
phx3plohvmn0045.prod.phx3.gdg
phx3plohvmn0404.prod.phx3.gdg
phx3plohvmn0370.prod.phx3.gdg
.EE
.SS Example 2
Omitting the header row, extract the first column only:
.IP
.EX
series \-f1 \-H < sample
.EE
.IP
.EX
phx3plohvmn0030.prod.phx3.gdg
phx3plohvmn0115.prod.phx3.gdg
phx3plohvmn0376.prod.phx3.gdg
phx3plohvmn0084.prod.phx3.gdg
phx3plohvmn0382.prod.phx3.gdg
phx3plohvmn0040.prod.phx3.gdg
phx3plohvmn0053.prod.phx3.gdg
phx3plohvmn0045.prod.phx3.gdg
phx3plohvmn0404.prod.phx3.gdg
phx3plohvmn0370.prod.phx3.gdg
.EE
.SS Example 3
Omitting the header row, extract the first and third through fourth
columns and quote each value.
Make each row a tuple:
.IP
.EX
series \-f1,3\-4 \-H \-\-tuple < sample
.EE
.IP
.EX
(\[aq]phx3plohvmn0030.prod.phx3.gdg\[aq],\[aq]10.43.6.130\[aq],\[aq]0.00\[aq])
(\[aq]phx3plohvmn0115.prod.phx3.gdg\[aq],\[aq]10.43.9.214\[aq],\[aq]0.03\[aq])
(\[aq]phx3plohvmn0376.prod.phx3.gdg\[aq],\[aq]10.43.11.157\[aq],\[aq]0.03\[aq])
(\[aq]phx3plohvmn0084.prod.phx3.gdg\[aq],\[aq]10.43.9.231\[aq],\[aq]0.05\[aq])
(\[aq]phx3plohvmn0382.prod.phx3.gdg\[aq],\[aq]10.43.11.193\[aq],\[aq]0.06\[aq])
(\[aq]phx3plohvmn0040.prod.phx3.gdg\[aq],\[aq]10.43.10.6\[aq],\[aq]0.06\[aq])
(\[aq]phx3plohvmn0053.prod.phx3.gdg\[aq],\[aq]10.43.8.87\[aq],\[aq]0.07\[aq])
(\[aq]phx3plohvmn0045.prod.phx3.gdg\[aq],\[aq]10.43.10.28\[aq],\[aq]0.15\[aq])
(\[aq]phx3plohvmn0404.prod.phx3.gdg\[aq],\[aq]10.43.9.2\[aq],\[aq]0.18\[aq])
(\[aq]phx3plohvmn0370.prod.phx3.gdg\[aq],\[aq]10.43.11.161\[aq],\[aq]0.25\[aq])
.EE
.SS Example 4
Omitting the header row, extract the second column, but combine with the
\f[CR]flatten\f[R] filter to create an SQL value list (or tuple):
.IP
.EX
series \-f2 \-H < sample | flatten \-\-tuple
.EE
.IP
.EX
(\[aq]3556aed5\-f4e7\-4ffe\-890c\-2627a034f8cf\[aq],\[aq]c5c0258a\-a2f9\-4981\-aba3\-20064bfb21e1\[aq],\[aq]906345f5\-3ea7\-41c6\-bb27\-9db3a629bf26\[aq],\[aq]18993486\-79c7\-4465\-bb27\-ac1d9bd45d51\[aq],\[aq]9497032c\-7a24\-462f\-b58b\-ae6f08b71460\[aq],\[aq]6db9abd7\-ec07\-48af\-9a02\-9404f406d9e2\[aq],\[aq]951ba7d5\-2c40\-42d9\-9da8\-4309b18d8da3\[aq],\[aq]9972bd00\-2c72\-47a3\-9672\-58e5031a1298\[aq],\[aq]3d6df97e\-f689\-498b\-9385\-85e75c2fec69\[aq],\[aq]81193f20\-c01b\-4f25\-af3d\-00c9af0f36eb\[aq])
.EE
.SH AUTHORS
Iain Campbell.
